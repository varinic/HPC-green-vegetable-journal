太湖神威上会用到openACC进行并行程序设计，接下来讲解openACC的一些基本概念和使用方法。
openACC可以指导编译器将程序翻译为运行在加速器上的并行程序
指导语句以#pragma acc 打头，后跟子语。

常用的#pragma acc parallel后跟一块区域，这块区域内的代码将会被并行化
即使如下大括号内若干个语句也会被并行化

#pragma acc parallel
{
  for(i=0;i<n;i++){
    a[i]=b[i]+c[i];
  }
  for(j=0;j<n;j++){
    d[j]=a[j]*c[j];
  }
}

#pragma acc loop 后紧跟一个循环，这个循环会被并行化，如：
#pragma acc parallel
{
  #pragma acc loop
  for(i=0;i<n;i++){
    a[i]=b[i]+c[i];
  }
  #pragma acc loop
  for(j=0;j<n;j++){
    d[j]=a[j]*c[j];
  }
}

tile分块也是用的比较多的优化方法，它将一个循环分成两个，乍一看循环层数增加了，但反而加快了程序
#pragma acc parallel loop tile (2)
for(i=0;i<n;i++){
  a[i]=b[i]+c[i];
}
编译后：
for(i=0;i<2;i++){
  int start=i*(n/2);
  int end=start+(n/2);
  for（j=start;j<end;j++){
    a[j]=b[j]+c[j];
  }
}
分成两个循环后可将原本大块数据a,b,c各分成前后两半a1,b1,c1,a2,b2,c2计算时1只和1相关，2只和2相关，大小减半后
计算1时可将a1,b1,c1都拷贝到device内存中，而且对cache也更友好。能显著加速。

从简单的矩阵乘法讲起。
int A[1024][1024];
int B[1024][1024];
int C[1024][1024];

const int M=1024,N=1024,K=1024;
int i,j,k;

for(i=0;i<M;i++){
  for(k=0;k<K;k++){
    for(j=0;j<N;j++){
      C[i][k]+=A[i][j]*B[j][k];
    }
  }
}
简单观察代码可以发现A和B都是只读，没有写，而C是有写的（+=需要把原有C数组里面的东西加上）
假设加速器device有p个核心，尝试着将一层一层循环并行化，首先最外面一层i，与i相关的的是C和A，
A只读，C虽然有写操作，但是对于二维数组不同i层之间没有数据依赖，所以可以并行化，即M个i并行划分到p个核心上。
可以想象每个核心上都运行上述代码，只是i的变化范围从0到M变成0到M/p。

然后看第二层循环，当然也可以再划分，但是当时运行这段代码只用了一个主核64个从核，i循环划分到从核上，内层循环不好再划分。
那么既然在从核上运行这两个内层循环，程序要怎么做呢，其实就是将A和B拷到从核局部存储空间，矩阵相乘计算后将结果放到C中，
最后C拷回主存。但是虽然主存有8G，局部存贮ldm只有64KB，指令16KB，所以将整个A，B和C划分的部分拷入是不可能的。
那么怎么办呢，数据划分来帮你。对应方法称为分块计算，将k循环分成两个循环（相当于把连续变化的k分成一块一块的），
内层循环对应连续的一块k。接下来的数据操作就是充分利用这64k的局部存贮ldm。紧接着i循环下拷贝A，C一维数据，如：A[_ldm_i][*]和C[_ldm_i][*]
*代表全部。k循环下拷贝B多个一维数据如B[*][_ldm_k~_ldm_k+n]（n为划分块大小）这样A` C` B`都在ldm中，最里面k循环和j循环计算完就能
计算完成C[i][_ldm_k~_ldm_k+n]，而且A数组中的数据重复利用了n次，减少数据拷贝。
但是对B的访问是高维在先，这是低效的，因为低维数据是连续存放的，高维数据只是低维数据连续存放的划分。
所以计算前就要将B转置。

openACC伪代码如下：
#pragma acc parallel local(i,j,k) copyin(A) copy(C) swapin(B(dimension:1,2))
#pragma acc loop independent
  for(i=0;i<M;i++){
#pragma acc loop tile(2) annotate(tilemask(C))
    for(k=0;k<K;k++){
      for(j=0;j<N;j++){
        C[i][k]+=A[i][j]*B[j][k];
      }
    }
  }
经过swacc编译器编译后的中间从核代码如下_slave.c
int _ldm_A[1][1024];
int _ldm_C[1][1024];
int _ldm_B[2][1024];

for(_ldm_i=my_id*1;_ldm_i<=1023;_ldm_i+=1*core_num){
  copy(_ldm_A[0],&A[_ldm_i][0],size0];
  copy(_ldm_C[0],&C[_ldm_i][0],size1];
  for(_ldm_k1=0;_ldm_k1<=1023;_ldm_k1+=2){
    copy(_ldm_swap_B0[0],&swap_B0[_ldm_k1][0],size2];
    for(_ldm_k=0;_ldm_k<=1;_ldm_k+=1){
      for(_ldm_j=0;_ldm_j<=1023;_ldm_j+=1){
        _ldm_C[0][_ldm_k+_ldm_k1]+=_ldm_A[0][_ldm_j]*_ldm_B[_ldm_k][_ldm_j];
      }
    }
  }
  ret=copy(&C[_ldm_i][0],_ldm_C[0],size3);
}

分块操作能将大块B数组分成小块，拷入ldm，实现高效计算。




date  18.1.16

关于local语句

如果变量在加速循环中计算赋值且不在循环外使用，可声明为 local，将其存储位置置于设备内存上，以提高效率。

变量列表中的变量、数组等需要在加速设备内存中申请空间，改变主存中同名变量的值不会影响到加速设备，
加速设备上对这些变量值的改变也不影响主存中的变量，
local 变量的初始值是不确定的，local 与 private 的唯一区别在于存储位置的不同。

变量列表中不支持子数组形式。













